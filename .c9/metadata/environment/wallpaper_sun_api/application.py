{"changed":true,"filter":false,"title":"application.py","tooltip":"/wallpaper_sun_api/application.py","value":"from flask import Flask, request, jsonify, render_template\nimport boto3\nfrom botocore import UNSIGNED\nfrom botocore.config import Config\nimport uuid\nimport datetime\n\napp = Flask(__name__)\n\n# Cliente S3 anônimo\ns3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))\n\n# Bucket e nome da tabela\nbucket_name = 'wallpaper-sun-2025'\n\n# Página inicial\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# Rota galeria\n@app.route('/gallery')\ndef gallery():\n    try:\n        # Lista os objetos (imagens) no S3\n        response = s3.list_objects_v2(Bucket=bucket_name)\n        images = []\n\n        # Verifica se o bucket tem arquivos e os adiciona à lista de imagens\n        if 'Contents' in response:\n            for obj in response['Contents']:\n                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"\n                images.append(image_url)\n\n        return render_template('gallery.html', images=images)\n\n    except Exception as e:\n        return f\"Erro ao carregar as imagens: {str(e)}\"\n\n\n# Upload de imagem\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    try:\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file uploaded'}), 400\n\n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({'error': 'No selected file'}), 400\n\n        filename = file.filename\n        image_id = str(uuid.uuid4())\n        now = datetime.datetime.utcnow().isoformat()\n\n        # Upload para o S3\n        s3.upload_fileobj(file, bucket_name, filename)\n\n        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'\n\n        # Retorno simples (sem DynamoDB)\n        return jsonify({\n            'message': 'Upload successful',\n            'image_id': image_id,\n            'filename': filename,\n            'url': url\n        }), 200\n\n    except Exception as e:\n        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500\n\n# Lista básica (sem DynamoDB)\n@app.route('/images', methods=['GET'])\ndef list_images():\n    try:\n        return jsonify([]) \n    except Exception as e:\n        return jsonify({'error': f'Error listing images: {str(e)}'}), 500\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')","undoManager":{"mark":15,"position":17,"stack":[[{"start":{"row":0,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","import uuid","import datetime","import os","","app = Flask(__name__)","","# AWS setup","s3 = boto3.client('s3')","dynamodb = boto3.resource('dynamodb')","bucket_name = os.environ.get('wallpaper-sun-2025')  # Nome do bucket","table_name = os.environ.get('ImagensMeta')  # Nome da tabela DynamoDB","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Rota de upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","        ","        image_id = str(uuid.uuid4())","        filename = file.filename","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        try:","            s3.upload_fileobj(file, bucket_name, filename)","        except Exception as e:","            return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","        # Salvar metadados no DynamoDB","        try:","            table = dynamodb.Table(table_name)","            table.put_item(Item={","                'image_id': image_id,","                'filename': filename,","                'upload_date': now,","                'uploader': 'usuarioteste',  # Substitua com o nome do usuário real","                'url': f'https://{bucket_name}.s3.amazonaws.com/{filename}'  # URL pública da imagem","            })","        except Exception as e:","            return jsonify({'error': f'Error saving metadata to DynamoDB: {str(e)}'}), 500","","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'url': f'https://{bucket_name}.s3.amazonaws.com/{filename}'  # URL pública da imagem","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Internal Server Error: {str(e)}'}), 500","","# Rota de listagem de imagens","@app.route('/images', methods=['GET'])","def list_images():","    try:","        table = dynamodb.Table(table_name)","        response = table.scan()","        images = response['Items']","        ","        # Adicionar a URL pública","        for image in images:","            image['url'] = f'https://{bucket_name}.s3.amazonaws.com/{image[\"filename\"]}'","","        return jsonify(images)","","    except Exception as e:","        return jsonify({'error': f'Error fetching images from DynamoDB: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista básica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como não usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou você pode criar algo fixo só pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista básica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como não usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou você pode criar algo fixo só pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Página de galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista de imagens","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Fazendo uma requisição para o S3 para listar objetos","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","        for obj in response.get('Contents', []):","            image = {","                'filename': obj['Key'],","                'url': f'https://{bucket_name}.s3.amazonaws.com/{obj[\"Key\"]}'","            }","            images.append(image)","","        return jsonify(images)","","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Página de galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista de imagens","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Fazendo uma requisição para o S3 para listar objetos","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","        for obj in response.get('Contents', []):","            image = {","                'filename': obj['Key'],","                'url': f'https://{bucket_name}.s3.amazonaws.com/{obj[\"Key\"]}'","            }","            images.append(image)","","        return jsonify(images)","","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":76,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore.config import Config  # Importando o Config corretamente","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version='unsigned'))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Página de galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista de imagens","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Fazendo uma requisição para o S3 para listar objetos","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","        for obj in response.get('Contents', []):","            image = {","                'filename': obj['Key'],","                'url': f'https://{bucket_name}.s3.amazonaws.com/{obj[\"Key\"]}'","            }","            images.append(image)","","        return jsonify(images)","","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":76,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore.config import Config  # Importando o Config corretamente","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version='unsigned'))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Página de galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista de imagens","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Fazendo uma requisição para o S3 para listar objetos","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","        for obj in response.get('Contents', []):","            image = {","                'filename': obj['Key'],","                'url': f'https://{bucket_name}.s3.amazonaws.com/{obj[\"Key\"]}'","            }","            images.append(image)","","        return jsonify(images)","","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":5},{"start":{"row":0,"column":0},"end":{"row":61,"column":39},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 anônimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# Página inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista básica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como não usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou você pode criar algo fixo só pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"]}],[{"start":{"row":18,"column":40},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"insert","lines":["    "]},{"start":{"row":19,"column":4},"end":{"row":20,"column":0},"action":"insert","lines":["",""]},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"remove","lines":["    "],"id":7}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"insert","lines":["#"],"id":8},{"start":{"row":20,"column":1},"end":{"row":20,"column":2},"action":"insert","lines":["g"]},{"start":{"row":20,"column":2},"end":{"row":20,"column":3},"action":"insert","lines":["a"]},{"start":{"row":20,"column":3},"end":{"row":20,"column":4},"action":"insert","lines":["l"]},{"start":{"row":20,"column":4},"end":{"row":20,"column":5},"action":"insert","lines":["e"]},{"start":{"row":20,"column":5},"end":{"row":20,"column":6},"action":"insert","lines":["r"]},{"start":{"row":20,"column":6},"end":{"row":20,"column":7},"action":"insert","lines":["i"]},{"start":{"row":20,"column":7},"end":{"row":20,"column":8},"action":"insert","lines":["a"]}],[{"start":{"row":20,"column":8},"end":{"row":21,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":21,"column":0},"end":{"row":22,"column":42},"action":"insert","lines":["def gallery():","    return render_template('gallery.html')"],"id":10}],[{"start":{"row":21,"column":0},"end":{"row":22,"column":42},"action":"remove","lines":["def gallery():","    return render_template('gallery.html')"],"id":11},{"start":{"row":21,"column":0},"end":{"row":23,"column":42},"action":"insert","lines":["@app.route('/gallery')","def gallery():","    return render_template('gallery.html')"]}],[{"start":{"row":20,"column":0},"end":{"row":23,"column":42},"action":"remove","lines":["#galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')"],"id":12},{"start":{"row":20,"column":0},"end":{"row":23,"column":42},"action":"insert","lines":["# Rota para a galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')"]}],[{"start":{"row":20,"column":0},"end":{"row":23,"column":42},"action":"remove","lines":["# Rota para a galeria","@app.route('/gallery')","def gallery():","    return render_template('gallery.html')"],"id":14},{"start":{"row":20,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["@app.route('/gallery')","def gallery():","    try:","        # Lista os objetos (imagens) no S3","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        # Verifica se o bucket tem arquivos e os adiciona à lista de imagens","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"",""]}],[{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"remove","lines":["    "],"id":15}],[{"start":{"row":19,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":16},{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":20,"column":1},"end":{"row":20,"column":2},"action":"insert","lines":[" "],"id":17},{"start":{"row":20,"column":2},"end":{"row":20,"column":3},"action":"insert","lines":["R"]},{"start":{"row":20,"column":3},"end":{"row":20,"column":4},"action":"insert","lines":["o"]},{"start":{"row":20,"column":4},"end":{"row":20,"column":5},"action":"insert","lines":["t"]},{"start":{"row":20,"column":5},"end":{"row":20,"column":6},"action":"insert","lines":["a"]}],[{"start":{"row":20,"column":6},"end":{"row":20,"column":7},"action":"insert","lines":[" "],"id":18},{"start":{"row":20,"column":7},"end":{"row":20,"column":8},"action":"insert","lines":["g"]},{"start":{"row":20,"column":8},"end":{"row":20,"column":9},"action":"insert","lines":["a"]},{"start":{"row":20,"column":9},"end":{"row":20,"column":10},"action":"insert","lines":["l"]},{"start":{"row":20,"column":10},"end":{"row":20,"column":11},"action":"insert","lines":["e"]},{"start":{"row":20,"column":11},"end":{"row":20,"column":12},"action":"insert","lines":["r"]},{"start":{"row":20,"column":12},"end":{"row":20,"column":13},"action":"insert","lines":["i"]},{"start":{"row":20,"column":13},"end":{"row":20,"column":14},"action":"insert","lines":["a"]}],[{"start":{"row":76,"column":28},"end":{"row":76,"column":71},"action":"remove","lines":["# Ou você pode criar algo fixo só pra teste"],"id":19},{"start":{"row":76,"column":27},"end":{"row":76,"column":28},"action":"remove","lines":[" "]}],[{"start":{"row":75,"column":8},"end":{"row":75,"column":61},"action":"remove","lines":["# Como não usamos DynamoDB, lista hardcoded (exemplo)"],"id":20},{"start":{"row":75,"column":4},"end":{"row":75,"column":8},"action":"remove","lines":["    "]},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"remove","lines":["    "]},{"start":{"row":74,"column":8},"end":{"row":75,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":414,"scrollleft":0,"selection":{"start":{"row":74,"column":8},"end":{"row":74,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":30,"state":"start","mode":"ace/mode/python"}},"timestamp":1745264204803}