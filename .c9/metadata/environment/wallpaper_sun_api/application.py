{"filter":false,"title":"application.py","tooltip":"/wallpaper_sun_api/application.py","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":90,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Configura√ß√µes","bucket_name = 'wallpaper-sun-2025'","tabela_dynamodb = 'ImagensMeta'","","# Cliente S3 e DynamoDB an√¥nimos (sem credenciais, acesso p√∫blico)","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","dynamodb = boto3.resource('dynamodb', config=Config(signature_version=UNSIGNED))","tabela = dynamodb.Table(tabela_dynamodb)","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# P√°gina da galeria","@app.route('/gallery')","def gallery():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'Nenhum arquivo enviado'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'Nenhum arquivo selecionado'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload no S3","        s3.upload_fileobj(file, bucket_name, filename)","","        # URL p√∫blica da imagem","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Registro no DynamoDB","        tabela.put_item(Item={","            'image_id': image_id,","            'filename': filename,","            'url': url,","            'upload_date': now","        })","","        return jsonify({","            'message': 'Upload realizado com sucesso',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Erro no upload ou no log: {str(e)}'}), 500","","# Rota futura para listar via DynamoDB (opcional)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # (Futuramente) poderemos buscar no DynamoDB","        return jsonify([])  # Placeholder","    except Exception as e:","        return jsonify({'error': f'Erro ao listar imagens: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":28},{"start":{"row":0,"column":0},"end":{"row":109,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Configura√ß√£o do S3 e DynamoDB","bucket_name = 'wallpaper-sun-2025'","tabela_dynamo = 'ImagensMeta'","","# Cliente S3 com acesso an√¥nimo (somente leitura na galeria)","s3 = boto3.client('s3', config=Config(signature_version='s3v4'))","","# Cliente DynamoDB (precisa de credenciais configuradas)","dynamodb = boto3.resource('dynamodb')","tabela = dynamodb.Table(tabela_dynamo)","","# P√°gina inicial com formul√°rio de upload","@app.route('/')","def index():","    return render_template('index.html')","","# P√°gina de galeria que lista imagens do bucket S3","@app.route('/gallery')","def gallery():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        print(f\"‚ùå Erro ao carregar galeria: {e}\")","        return f\"Erro ao carregar as imagens: {str(e)}\"","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    print(\"üì• Recebido upload request\")","","    try:","        if 'file' not in request.files:","            print(\"‚ö†Ô∏è Nenhum arquivo encontrado na requisi√ß√£o\")","            return jsonify({'error': 'Nenhum arquivo enviado'}), 400","","        file = request.files['file']","        if file.filename == '':","            print(\"‚ö†Ô∏è Nenhum arquivo selecionado\")","            return jsonify({'error': 'Arquivo n√£o selecionado'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Envia para S3","        print(f\"üì§ Enviando {filename} para o bucket {bucket_name}\")","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Registra no DynamoDB","        print(f\"üìù Salvando log no DynamoDB para {filename}\")","        tabela.put_item(Item={","            'image_id': image_id,","            'filename': filename,","            'url': url,","            'upload_date': now","        })","","        print(\"‚úÖ Upload finalizado com sucesso\")","        return jsonify({","            'message': 'Upload realizado com sucesso',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        print(f\"‚ùå Erro durante upload: {e}\")","        return jsonify({'error': f'Erro no upload: {str(e)}'}), 500","","# Rota opcional para testes de API","@app.route('/images', methods=['GET'])","def list_images():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append({'url': image_url})","","        return jsonify(images), 200","","    except Exception as e:","        print(f\"‚ùå Erro listando imagens: {e}\")","        return jsonify({'error': str(e)}), 500","","# Executa a aplica√ß√£o","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""]}],[{"start":{"row":68,"column":18},"end":{"row":68,"column":19},"action":"remove","lines":[" "],"id":29},{"start":{"row":68,"column":16},"end":{"row":68,"column":18},"action":"remove","lines":["üìù"]}],[{"start":{"row":103,"column":19},"end":{"row":103,"column":20},"action":"remove","lines":["r"],"id":30},{"start":{"row":103,"column":18},"end":{"row":103,"column":19},"action":"remove","lines":["E"]},{"start":{"row":103,"column":17},"end":{"row":103,"column":18},"action":"remove","lines":[" "]},{"start":{"row":103,"column":16},"end":{"row":103,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":103,"column":16},"end":{"row":103,"column":17},"action":"insert","lines":["R"],"id":31}],[{"start":{"row":103,"column":16},"end":{"row":103,"column":17},"action":"remove","lines":["R"],"id":32}],[{"start":{"row":103,"column":16},"end":{"row":103,"column":17},"action":"insert","lines":["E"],"id":33},{"start":{"row":103,"column":17},"end":{"row":103,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"remove","lines":[" "],"id":34},{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"remove","lines":["Ô∏è"]}],[{"start":{"row":54,"column":21},"end":{"row":54,"column":22},"action":"remove","lines":[" "],"id":35},{"start":{"row":54,"column":20},"end":{"row":54,"column":21},"action":"remove","lines":["Ô∏è"]}],[{"start":{"row":54,"column":19},"end":{"row":54,"column":20},"action":"remove","lines":["‚ö†"],"id":36}],[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"remove","lines":["‚ö†"],"id":37}],[{"start":{"row":39,"column":18},"end":{"row":39,"column":19},"action":"remove","lines":["E"],"id":38},{"start":{"row":39,"column":17},"end":{"row":39,"column":18},"action":"remove","lines":[" "]},{"start":{"row":39,"column":16},"end":{"row":39,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":39,"column":16},"end":{"row":39,"column":17},"action":"insert","lines":["E"],"id":39}],[{"start":{"row":0,"column":0},"end":{"row":109,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Configura√ß√£o do S3 e DynamoDB","bucket_name = 'wallpaper-sun-2025'","tabela_dynamo = 'ImagensMeta'","","# Cliente S3 com acesso an√¥nimo (somente leitura na galeria)","s3 = boto3.client('s3', config=Config(signature_version='s3v4'))","","# Cliente DynamoDB (precisa de credenciais configuradas)","dynamodb = boto3.resource('dynamodb')","tabela = dynamodb.Table(tabela_dynamo)","","# P√°gina inicial com formul√°rio de upload","@app.route('/')","def index():","    return render_template('index.html')","","# P√°gina de galeria que lista imagens do bucket S3","@app.route('/gallery')","def gallery():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        print(f\"Erro ao carregar galeria: {e}\")","        return f\"Erro ao carregar as imagens: {str(e)}\"","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    print(\"üì• Recebido upload request\")","","    try:","        if 'file' not in request.files:","            print(\"Nenhum arquivo encontrado na requisi√ß√£o\")","            return jsonify({'error': 'Nenhum arquivo enviado'}), 400","","        file = request.files['file']","        if file.filename == '':","            print(\"Nenhum arquivo selecionado\")","            return jsonify({'error': 'Arquivo n√£o selecionado'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Envia para S3","        print(f\"üì§ Enviando {filename} para o bucket {bucket_name}\")","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Registra no DynamoDB","        print(f\"Salvando log no DynamoDB para {filename}\")","        tabela.put_item(Item={","            'image_id': image_id,","            'filename': filename,","            'url': url,","            'upload_date': now","        })","","        print(\"‚úÖ Upload finalizado com sucesso\")","        return jsonify({","            'message': 'Upload realizado com sucesso',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        print(f\"‚ùå Erro durante upload: {e}\")","        return jsonify({'error': f'Erro no upload: {str(e)}'}), 500","","# Rota opcional para testes de API","@app.route('/images', methods=['GET'])","def list_images():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append({'url': image_url})","","        return jsonify(images), 200","","    except Exception as e:","        print(f\"Erro listando imagens: {e}\")","        return jsonify({'error': str(e)}), 500","","# Executa a aplica√ß√£o","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""],"id":40},{"start":{"row":0,"column":0},"end":{"row":61,"column":39},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"]}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":39},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"],"id":41},{"start":{"row":0,"column":0},"end":{"row":81,"column":39},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Rota galeria","@app.route('/gallery')","def gallery():","    try:","        # Lista os objetos (imagens) no S3","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        # Verifica se o bucket tem arquivos e os adiciona √† lista de imagens","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"]}],[{"start":{"row":0,"column":0},"end":{"row":81,"column":39},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Rota galeria","@app.route('/gallery')","def gallery():","    try:","        # Lista os objetos (imagens) no S3","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        # Verifica se o bucket tem arquivos e os adiciona √† lista de imagens","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"],"id":42},{"start":{"row":0,"column":0},"end":{"row":81,"column":39},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Rota galeria","@app.route('/gallery')","def gallery():","    try:","        # Lista os objetos (imagens) no S3","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        # Verifica se o bucket tem arquivos e os adiciona √† lista de imagens","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"]}],[{"start":{"row":0,"column":0},"end":{"row":81,"column":39},"action":"remove","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Bucket e nome da tabela","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial","@app.route('/')","def index():","    return render_template('index.html')","","# Rota galeria","@app.route('/gallery')","def gallery():","    try:","        # Lista os objetos (imagens) no S3","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        # Verifica se o bucket tem arquivos e os adiciona √† lista de imagens","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","","# Upload de imagem","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'No file uploaded'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'No selected file'}), 400","","        filename = file.filename","        image_id = str(uuid.uuid4())","        now = datetime.datetime.utcnow().isoformat()","","        # Upload para o S3","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f'https://{bucket_name}.s3.amazonaws.com/{filename}'","","        # Retorno simples (sem DynamoDB)","        return jsonify({","            'message': 'Upload successful',","            'image_id': image_id,","            'filename': filename,","            'url': url","        }), 200","","    except Exception as e:","        return jsonify({'error': f'Error uploading file to S3: {str(e)}'}), 500","","# Lista b√°sica (sem DynamoDB)","@app.route('/images', methods=['GET'])","def list_images():","    try:","        # Como n√£o usamos DynamoDB, lista hardcoded (exemplo)","        return jsonify([])  # Ou voc√™ pode criar algo fixo s√≥ pra teste","    except Exception as e:","        return jsonify({'error': f'Error listing images: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')"],"id":43},{"start":{"row":0,"column":0},"end":{"row":65,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify, render_template","import boto3","from botocore import UNSIGNED","from botocore.config import Config","import uuid","import datetime","","app = Flask(__name__)","","# Cliente S3 an√¥nimo (sem autentica√ß√£o)","s3 = boto3.client('s3', config=Config(signature_version=UNSIGNED))","","# Nome do bucket (j√° deve estar com pol√≠tica p√∫blica ativada)","bucket_name = 'wallpaper-sun-2025'","","# P√°gina inicial com formul√°rio de upload","@app.route('/')","def index():","    return render_template('index.html')","","# Galeria de imagens p√∫blicas do S3","@app.route('/gallery')","def gallery():","    try:","        response = s3.list_objects_v2(Bucket=bucket_name)","        images = []","","        if 'Contents' in response:","            for obj in response['Contents']:","                image_url = f\"https://{bucket_name}.s3.amazonaws.com/{obj['Key']}\"","                images.append(image_url)","","        return render_template('gallery.html', images=images)","    ","    except Exception as e:","        return f\"Erro ao carregar as imagens: {str(e)}\"","","# Rota de upload","@app.route('/upload', methods=['POST'])","def upload_file():","    try:","        if 'file' not in request.files:","            return jsonify({'error': 'Nenhum arquivo enviado'}), 400","","        file = request.files['file']","        if file.filename == '':","            return jsonify({'error': 'Nenhum arquivo selecionado'}), 400","","        filename = f\"{uuid.uuid4()}_{file.filename}\"  # evita arquivos com o mesmo nome","        s3.upload_fileobj(file, bucket_name, filename)","","        url = f\"https://{bucket_name}.s3.amazonaws.com/{filename}\"","        print(f\"[LOG] Imagem enviada com sucesso: {url}\")","","        return jsonify({","            'message': 'Upload realizado com sucesso!',","            'url': url","        }), 200","","    except Exception as e:","        print(f\"[ERRO] Falha ao enviar imagem: {str(e)}\")","        return jsonify({'error': f'Erro no upload: {str(e)}'}), 500","","if __name__ == '__main__':","    app.run(debug=True, host='0.0.0.0')",""]}]]},"ace":{"folds":[],"scrolltop":125,"scrollleft":0,"selection":{"start":{"row":65,"column":0},"end":{"row":65,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":8,"state":"start","mode":"ace/mode/python"}},"timestamp":1745277425150,"hash":"e1c2b0310da6e79e9013741795902bb3b6e69020"}